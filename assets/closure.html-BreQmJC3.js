import{_ as s,c as a,d as p,o as t}from"./app-YirvRM7o.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="闭包与垃圾回收-你以为-释放-其实还在" tabindex="-1"><a class="header-anchor" href="#闭包与垃圾回收-你以为-释放-其实还在"><span>闭包与垃圾回收：你以为“释放”，其实还在</span></a></h1><h2 id="垃圾回收-不再需要的内存" tabindex="-1"><a class="header-anchor" href="#垃圾回收-不再需要的内存"><span>垃圾回收：不再需要的内存？</span></a></h2><p>“需不需要”是人决定的，但 JavaScript 垃圾回收机制关心的是<strong>你能不能再访问到那块内存</strong>。</p><p>来看一个例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里看不出来 <code>nums</code> 是否“还需要”，但对垃圾回收机制来说，只要它<strong>无法访问</strong>，它就是垃圾；反之，即使你主观上不再需要，只要某处<strong>仍然持有引用</strong>，它就不会被回收。</p><h2 id="dom-元素是否是垃圾" tabindex="-1"><a class="header-anchor" href="#dom-元素是否是垃圾"><span>DOM 元素是否是垃圾？</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> doms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> dom<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        doms<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">dom</span> <span class="token operator">=&gt;</span></span>
<span class="line">            dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> increase<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> increase <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> increase<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这些 <code>div</code> 元素没有被插入页面，但因为 <code>increase</code> 函数闭包引用了 <code>doms</code> 数组，它们仍然是“活着”的，<strong>不会被回收</strong>。这跟它是否占了很多内存无关，关键是：<strong>是否可触达</strong>。</p><h2 id="javascript-垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#javascript-垃圾回收机制"><span>JavaScript 垃圾回收机制</span></a></h2><p>垃圾回收的核心逻辑是：</p><ul><li><strong>无法触达</strong> → 可被回收。GC 视为垃圾</li><li><strong>仍然可触达，但你不再需要</strong> → 这就构成了<strong>内存泄漏</strong></li></ul><p>换言之，<strong>是否还“需要”并不重要，只要还“能访问”，就不会回收</strong>。</p><p>常见机制：</p><ul><li><p>引用计数（已被治理）</p></li><li><p><strong>标记清除</strong> (Mark and Sweep)</p><ul><li>新生代、老生代、星历图 (适用于 V8 引擎)</li></ul></li></ul><h2 id="闭包-内存泄漏的温带" tabindex="-1"><a class="header-anchor" href="#闭包-内存泄漏的温带"><span>闭包：内存泄漏的温带</span></a></h2><p>闭包是 JavaScript 中强大的功能，但也容易让我们“忘记释放”，从而造成内存泄漏。</p><h3 id="例子-1-闭包导致的持久引用" tabindex="-1"><a class="header-anchor" href="#例子-1-闭包导致的持久引用"><span>例子 1：闭包导致的持久引用</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> doms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> dom<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        doms<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">dom</span> <span class="token operator">=&gt;</span></span>
<span class="line">            dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> increase<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> increase <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> increase<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>increase</code> 闭包引用了 <code>doms</code></li><li><code>increase</code> 被绑定到按钮点击事件，始终存在</li><li>所以 <code>doms</code> 永远不会被回收，即使你“看起来不再用它了”</li></ul><h3 id="例子-2-词法环境膏肿导致不可回收" tabindex="-1"><a class="header-anchor" href="#例子-2-词法环境膏肿导致不可回收"><span>例子 2：词法环境膏肿导致不可回收</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> doms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> dom<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">_temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> doms <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> increase<span class="token punctuation">;</span> <span class="token comment">// 到这个时间节点，词法环境优化的步骤已经结束了</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> increase<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> increase <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    increase <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使 <code>increase</code> 并没有直接使用 <code>doms</code>，由于另一个函数 <code>_temp</code> 引用了 <code>doms</code>，<strong>词法环境无法优化清理</strong>。导致每次调用 <code>createInstance</code>，都会留下新一批无法释放的 <code>doms</code> —— 内存泄漏。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="闭包导致内存泄漏的两种典型情况" tabindex="-1"><a class="header-anchor" href="#闭包导致内存泄漏的两种典型情况"><span>闭包导致内存泄漏的两种典型情况：</span></a></h3><ol><li><p><strong>持有了不再需要的函数引用</strong></p><ul><li>导致函数关联的词法环境无法销毁</li></ul></li><li><p><strong>多个函数共享词法环境</strong></p><ul><li>某一个函数使用了变量，会阻止该词法环境中所有变量被释放</li></ul></li></ol><h3 id="避免策略" tabindex="-1"><a class="header-anchor" href="#避免策略"><span>避免策略：</span></a></h3><ul><li><strong>即时解除不再使用的引用</strong></li><li><strong>避免将大量变量暴露在共享词法环境中</strong></li><li><strong>避免闭包中意外持有 DOM 或大型对象引用</strong></li></ul><hr><p>这样写，浏览器的垃圾回收才知道：<strong>哦，这块真的没人再用了，可以释放了。</strong></p>`,30)]))}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/frontend/js/closure.html","title":"闭包与垃圾回收：你以为“释放”，其实还在","lang":"zh-CN","frontmatter":{},"git":{"contributors":[{"name":"junezqj","username":"junezqj","email":"junezqj@gmail.com","commits":1,"url":"https://github.com/junezqj"},{"name":"june","username":"june","email":"junezqj@gmail.com","commits":1,"url":"https://github.com/june"}],"changelog":[{"hash":"a856c4c8f235d778ee268e6c58c616c6b7a845cf","time":1747993199000,"email":"junezqj@gmail.com","author":"june","message":"refactor：界面重构"},{"hash":"da69365d3c0595c48b2ef57f83ee8096e45bc1bf","time":1742811744000,"email":"junezqj@gmail.com","author":"junezqj","message":"feat: 闭包"}]},"filePathRelative":"frontend/js/closure.md"}');export{i as comp,u as data};
